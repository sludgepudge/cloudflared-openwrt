name: Build

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  generate_matrix:
    name: Set matrix
    runs-on: ubuntu-latest
    outputs:
      sdks: ${{ steps.out.outputs.sdks }}
    strategy:
      matrix:
        ref:
          - openwrt-23.05 # ipk only
    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ matrix.ref }}

      - name: Install prerequisites
        run: sudo apt-get update && sudo apt-get install -y patch curl build-essential

      - name: Set targets
        id: find_targets
        run: |
          REF=${{ matrix.ref }}

          JSON='['
          FIRST=1

          while read -r line;
          do
            ARCH=$(echo "$line" | cut -d " " -f 1)

            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            FIRST=0

            JSON="$JSON"'{"arch":"'"$ARCH"'","ref":"'"$REF"'"}'
          done <<< $(perl ./scripts/dump-target-info.pl architectures 2>/dev/null)

          JSON="$JSON"']'
          echo -e "\n---- sdks ----\n"
          echo "$JSON"
          echo -e "\n---- sdks ----\n"
          echo "sdks=$JSON" >> "$GITHUB_OUTPUT"

      - uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.ref }}
          outputs: |-
            sdks: ${{ steps.find_targets.outputs.sdks }}

  gather_matrix:
    name: Gather build matrices
    runs-on: ubuntu-latest
    needs: generate_matrix
    outputs:
      result: ${{ steps.gather.outputs.result }}
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: generate_matrix
      - name: Gather matrices
        id: gather
        run: |
          result=$(jq -c '.sdks[]' <<< '${{ steps.read.outputs.result }}' | jq -c -s add)
          echo "result=${result}" >> $GITHUB_OUTPUT

  build:
    name: Build for ${{ matrix.arch }}-${{ matrix.ref }}
    runs-on: ubuntu-latest
    needs: gather_matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.gather_matrix.outputs.result) }}
    steps:
      - name: Install prerequisites
        run: sudo apt-get update && sudo apt-get install -y patch curl build-essential

      - name: Build Go 1.24 + Cloudflare TLS patches
        run: |
          git clone https://go.googlesource.com/go "${{ github.workspace }}/go-custom"
          cd "${{ github.workspace }}/go-custom"
          git checkout go1.24.0
          GO_12212_HASH=$(git rev-parse go1.22.12)
          
          git clone https://github.com/cloudflare/go /tmp/go-cf
          cd /tmp/go-cf
          git checkout cf
          git diff --binary $(git merge-base cf $GO_12212_HASH)..cf -- src/crypto/tls src/net/http > "${{ github.workspace }}/go-custom/cf-tls.patch"
          
          cd "${{ github.workspace }}/go-custom"
          git checkout -b go1.24-cf
          patch -p1 < cf-tls.patch
          
          cd src
          ./make.bash

      - name: Verify Go installation
        run: |
          "${{ github.workspace }}/go-custom/bin/go" version
          [[ $("${{ github.workspace }}/go-custom/bin/go" version) =~ go1\.24 ]] || exit 1

      - name: Prepare SDK Environment
        run: |
          cat > build-wrapper.sh << 'EOF'
          #!/bin/bash
          export GOROOT="${{ github.workspace }}/go-custom"
          export PATH="$GOROOT/bin:$PATH"
          export GOCACHE=/tmp/gocache
          exec "$@"
          EOF
          chmod +x build-wrapper.sh

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch and Patch Cloudflared Makefile
        run: |
          mkdir -p cloudflared
          curl -sL "https://raw.githubusercontent.com/openwrt/packages/master/net/cloudflared/Makefile" -o cloudflared/Makefile
          sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=${{ github.ref_name }}/" cloudflared/Makefile
          sed -i "s/PKG_HASH:=.*/PKG_HASH:=skip/" cloudflared/Makefile
          sed -i 's#\.\./\.\.#$(TOPDIR)/feeds/packages#' cloudflared/Makefile
          
          sed -i '/HOST_GO_PKG_VERSION/d' cloudflared/Makefile
          sed -i '/HOST_GO_PKG_SOURCE/d' cloudflared/Makefile
          sed -i '/HOST_GO_PKG_HASH/d' cloudflared/Makefile
          
          echo -e "\nHOST_GO := ${{ github.workspace }}/go-custom/bin/go" >> cloudflared/Makefile

      - name: Create default files
        run: |
          mkdir -p cloudflared/files
          cat > cloudflared/files/sample_config.yml << 'EOF'
          tunnel: example-tunnel-id
          credentials-file: /etc/cloudflared/credentials.json

          #
          #ingress:
          #  - hostname: luci.example.com
          #    service: http://localhost:80
          #  - hostname: ssh.example.com
          #    service: ssh://localhost:22
          #  - service: http_status:404
          EOF
          cat > cloudflared/files/cloudflared.config << 'EOF'
          config cloudflared 'config'
              option enabled '0'
              option token ''
              option config '/etc/cloudflared/config.yml'
              option origincert '/etc/cloudflared/cert.pem'
              option protocol 'quic'
              option loglevel 'info'
              option logfile '/var/log/cloudflared.log'
          EOF
          cat > cloudflared/files/cloudflared.init << 'EOF'
          #!/bin/sh /etc/rc.common
          # Compiled by sludge <me@slud.ge>

          USE_PROCD=1
          START=99

          CONF="cloudflared"
          PROG="/usr/bin/cloudflared"

          append_param_arg() {
              local value
              config_get value "config" "$1" $2
              [ -n "$value" ] && procd_append_param command "--${1//_/-}" "$value"
          }

          start_service() {
              config_load "$CONF"

              local enabled
              config_get_bool enabled "config" "enabled"
              [ "$enabled" -eq "1" ] || return 1

              procd_open_instance "$CONF"
              procd_set_param command "$PROG" "tunnel"
              procd_append_param command "--no-autoupdate"

              append_param_arg "config" "/etc/cloudflared/config.yml"
              append_param_arg "origincert" "/etc/cloudflared/cert.pem"
              append_param_arg "edge_bind_address"
              append_param_arg "edge_ip_version"
              append_param_arg "grace_period"
              append_param_arg "protocol"
              append_param_arg "region"
              append_param_arg "retries"
              append_param_arg "tag"
              append_param_arg "metrics"
              append_param_arg "loglevel"
              append_param_arg "logfile"

              procd_append_param command "run"
              append_param_arg "token"

              procd_set_param respawn
              procd_set_param stderr 1

              procd_close_instance
          }

          reload_service() {
              stop
              start
          }

          service_triggers() {
              procd_add_reload_trigger "$CONF"
              procd_add_interface_trigger "interface.*.up" "wan" /etc/init.d/cloudflared restart
          }
          EOF
          chmod +x cloudflared/files/cloudflared.init

      - name: Build Package
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.ref }}
          V: s
          IGNORE_ERRORS: n m y
          COMMAND_PREFIX: ${{ github.workspace }}/build-wrapper.sh

      - name: Upload Output Folder
        uses: actions/upload-artifact@v4
        with:
          name: cloudflared-${{ matrix.arch }}-${{ matrix.ref }}
          path: bin/packages/${{ matrix.arch }}/action/cloudflared*

  release:
    name: Release ${{ github.ref_name }}
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate SHA256 Sums
        run: |
          echo "## SHA256 Sums" > SUMS.md
          echo '```' >> SUMS.md
          for f in *.ipk; do
            printf "%-55s %s\n" "$f" "$(sha256sum "$f" | cut -d' ' -f1)" >> SUMS.md
          done
          echo '```' >> SUMS.md

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: SUMS.md
          files: |
            *.ipk